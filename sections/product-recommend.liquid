{{ 'section-product-recommend.css' | asset_url | stylesheet_tag }}

<div id="section-{{ section.id }}" class="product-recommend">
  <h3 class="product-recommend-heading">{{ section.settings.heading }}</h3>
  <div class="product-recommend-text text_24">{{ section.settings.text }}</div>
  <div class="swiper product-recommend-swiper">
    <div
      class="swiper-wrapper"
      data-url="{{ routes.product_recommendations_url }}?section_id={{ section.id }}&product_id={{ product.id }}&limit=10"
    >
      {% if recommendations.performed and recommendations.products_count > 0 %}
        {% for product in recommendations.products %}
          <div class="product-item swiper-slide">
            <div class="product-image">
              <img src="{{ product.featured_media | image_url }}" alt="{{ product.title }}">
              <a href="{{ product.url }}" class="product-btn">{{- 'shopping.svg' | inline_asset_content -}}</a>
            </div>
            <div class="product-info">
              <div class="product-desc">{{ product.description | truncate: 45 }}</div>
              <div class="flex-center">
                <h5 class="product-title truncate-2-lines">
                  <a href="{{ product.url }}">{{ product.title }}</a>
                </h5>
                <div class="product-price text_24">{{ product.price | money }}</div>
              </div>
            </div>
          </div>
        {% endfor %}
      {% endif %}
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function () {
    const handleIntersection = (entries, observer) => {
      if (!entries[0].isIntersecting) return;

      observer.unobserve(productRecommendationsSection);

      const url = productRecommendationsSection.dataset.url;

      fetch(url)
        .then((response) => response.text())
        .then((text) => {
          const html = document.createElement('div');
          html.innerHTML = text;
          const recommendations = html.querySelector('.product-recommend-swiper .swiper-wrapper');

          if (recommendations && recommendations.innerHTML.trim().length) {
            productRecommendationsSection.innerHTML = recommendations.innerHTML;

            initializeSwiper();
          }
        })
        .catch((e) => {
          console.error(e);
        });
    };

    const initializeSwiper = () => {
      setTimeout(() => {
        new Swiper('.product-recommend-swiper', {
          slidesPerView: 'auto',
          spaceBetween: 24,
          freeMode: true,
        });
      }, 0);
    };

    const productRecommendationsSection = document.querySelector('.product-recommend-swiper .swiper-wrapper');
    const observer = new IntersectionObserver(handleIntersection, { rootMargin: '0px 0px 400px 0px' });

    observer.observe(productRecommendationsSection);
  });
</script>

{% schema %}
{
  "name": "product recommend",
  "tag": "section",
  "class": "section",
  "disabled_on": {
    "groups": ["header", "footer"]
  },
  "settings": [
    {
      "type": "inline_richtext",
      "id": "heading",
      "label": "heading"
    },
    {
      "type": "inline_richtext",
      "id": "text",
      "label": "text"
    }
  ],
  "presets": [
    {
      "name": "product recommend"
    }
  ]
}
{% endschema %}

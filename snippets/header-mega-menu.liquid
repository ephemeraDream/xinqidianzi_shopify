{% comment %}
  Renders a megamenu for the header.

  Usage:
  {% render 'header-mega-menu' %}
{% endcomment %}

<nav class="header__inline-menu">
  <ul class="list-menu list-menu--inline" role="list">
    {%- for link in section.settings.menu.links -%}
      <li>
        {%- if link.links != blank -%}
          <header-menu>
            <details id="Details-HeaderMenu-{{ forloop.index }}" class="mega-menu">
              <summary
                id="HeaderMenu-{{ link.handle }}"
                class="header__menu-item list-menu__item link focus-inset"
              >
                <span
                  {%- if link.child_active %}
                    class="header__active-menu-item"
                  {% endif %}
                >
                  {{- link.title | escape -}}
                </span>
                {{- 'icon-caret.svg' | inline_asset_content -}}
              </summary>
              <div
                id="MegaMenu-Content-{{ forloop.index }}"
                class="mega-menu__content color-{{ section.settings.menu_color_scheme }} gradient motion-reduce global-settings-popup{% if link.handle == 'products' %} mega-menu__content-product{% endif %}"
                tabindex="-1"
              >
                <div class="mega-menu__content_body">
                  <ul
                    class="mega-menu__list page-width{% if link.levels == 1 %} mega-menu__list--condensed{% endif %}"
                    role="list"
                  >
                    {%- for childlink in link.links -%}
                      <li>
                        <a
                          id="HeaderMenu-{{ link.handle }}-{{ childlink.handle }}"
                          href="{{ childlink.url }}"
                          class="mega-menu__link mega-menu__link--level-2 link{% if childlink.current or forloop.index == 1 %} mega-menu__link--active{% endif %}{% if link.handle == 'products' %} mega-menu__collection-item{% endif %}"
                          {% if childlink.current %}
                            aria-current="page"
                          {% endif %}
                        >
                          {{ childlink.title | escape }}
                        </a>
                        {%- if childlink.links != blank -%}
                          <ul class="list-unstyled" role="list">
                            {%- for grandchildlink in childlink.links -%}
                              <li>
                                <a
                                  id="HeaderMenu-{{ link.handle }}-{{ childlink.handle }}-{{ grandchildlink.handle }}"
                                  href="{{ grandchildlink.url }}"
                                  class="mega-menu__link link{% if grandchildlink.current %} mega-menu__link--active{% endif %}"
                                  {% if grandchildlink.current %}
                                    aria-current="page"
                                  {% endif %}
                                >
                                  {{ grandchildlink.title | escape }}
                                </a>
                              </li>
                            {%- endfor -%}
                          </ul>
                        {%- endif -%}
                      </li>
                    {%- endfor -%}

                    {%- if link.handle == 'products' %}
                      <div class="view_all_box">
                        <div class="view_all_box_line"></div>
                        <a href="{{ link.url }}">View All Products</a>
                      </div>
                    {% endif %}
                  </ul>
                  {%- if link.handle == 'products' %}
                    <div id="collection-products" class="mega-menu__flex-box"></div>
                  {% endif %}
                </div>
              </div>
            </details>
          </header-menu>
        {%- else -%}
          <a
            id="HeaderMenu-{{ link.handle }}"
            href="{{ link.url }}"
            class="header__menu-item list-menu__item link link--text focus-inset"
            {% if link.current %}
              aria-current="page"
            {% endif %}
          >
            <span
              {%- if link.current %}
                class="header__active-menu-item"
              {% endif %}
            >
              {{- link.title | escape -}}
            </span>
          </a>
        {%- endif -%}
      </li>
    {%- endfor -%}
  </ul>
</nav>

<script>
  document.addEventListener('DOMContentLoaded', function () {
    const collectionItems = document.querySelectorAll('.mega-menu__collection-item');
    const productListContainer = document.getElementById('collection-products');
    const contentProductElement = document.querySelector('.mega-menu__content-product');

    // 创建 IntersectionObserver 实例来监视 .mega-menu__content-product 的可见性
    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            // 如果 .mega-menu__content-product 元素出现在视口中，则加载第一个 Collection 的产品
            loadProducts(collectionItems[0].getAttribute('href'));
            // 停止监听，因为只需要在首次可见时加载
            observer.disconnect();
          }
        });
      },
      { threshold: 0.1 }
    ); // 触发条件：元素至少有 10% 可见

    // 开始监听 .mega-menu__content-product 元素
    if (contentProductElement) {
      observer.observe(contentProductElement);
    }

    // 监听 Collection 列表项点击事件
    collectionItems.forEach((item) => {
      item.addEventListener('click', function (event) {
        event.preventDefault();
        const collectionHandle = this.getAttribute('href');

        // 先移除所有项的 'mega-menu__link--active' 类
        collectionItems.forEach((item) => {
          item.classList.remove('mega-menu__link--active');
        });

        // 给当前点击的项添加 'mega-menu__link--active' 类
        this.classList.add('mega-menu__link--active');

        loadProducts(collectionHandle);
      });
    });

    // 使用 AJAX 加载产品
    function loadProducts(href) {
      const url = `${href}/products.json?limit=3`;

      fetch(url)
        .then((response) => response.json())
        .then((data) => {
          // 清空现有的产品列表
          productListContainer.innerHTML = '';

          // 遍历返回的产品数据并渲染
          data.products.forEach((product) => {
            const productUrl = `/products/${product.handle}`; // 生成产品的 URL

            const productHTML = `
              <div class="product-item">
                <a href="${productUrl}">
                  <img src="${product.images[0]?.src}" alt="${product.title}" />
                  <h4>${product.title}</h4>
                  <div class="flex-end">
                    <div class="product-desc">${product.body_html}</div>{{- 'arrow-right.svg' | inline_asset_content -}}
                  </div>
                </a>
              </div>
            `;
            productListContainer.insertAdjacentHTML('beforeend', productHTML);
          });
        })
        .catch((error) => {
          console.error('Error loading products:', error);
        });
    }
  });
</script>
